@page "/cards"
@rendermode InteractiveServer

<PageTitle>Cards</PageTitle>

<div class="container mx-auto text-center">
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@_currentCard.Term</h5>
            <p class="card-text">@_currentCard.Translation</p>
        </div>
    </div>

    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-5 col-lg-2">
                <button type="button" class="btn btn-primary w-100" @onclick="SetNextCard">Previous</button>
            </div>

            <div class="col-5 col-lg-2">
                <button type="button" class="btn btn-primary w-100" @onclick="SetNextCard">Next</button>
            </div>
        </div>


        <div class="accordion mt-2" id="accordionExample">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button show" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Examples
                    </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        @StringToHtml(_currentCard.Examples)
                    </div>
                </div>
            </div>
           
        </div>
    </div>
    
</div>

@code {
    private readonly string _examples = "<strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n";
    private List<CardDto> _cards;
    private CardDto _currentCard;

    RenderFragment StringToHtml(string htmlString)
    {
        return new RenderFragment(b => b.AddMarkupContent(0, htmlString));
    }

    record CardDto(Guid Id, string Term, string Translation, string Examples);


    private void SetNextCard()
    {
        _currentCard = GetNextCard();
    }
    
    private CardDto GetNextCard()
    {
        // get random card from the list
        return _cards[new Random().Next(0, _cards.Count)];
    }
    
    protected override async Task OnInitializedAsync()
    {
        _cards = [
            new CardDto(Guid.NewGuid(), "to facilitate", "Облегчить", "The new policy will <strong>facilitate</strong> the release of new software."),
            new CardDto(Guid.NewGuid(), "get along with", "Ладить", "I don't <strong>get along with</strong> my boss."),
            new CardDto(Guid.NewGuid(), "to be in charge of", "Отвечать за", "I'm <strong>in charge of</strong> the project."),
            new CardDto(Guid.NewGuid(), "to be responsible for", "Отвечать за", "I'm <strong>responsible for</strong> the project."),
            new CardDto(Guid.NewGuid(), "to be involved in", "Быть вовлеченным в", "I'm <strong>involved in</strong> the project."),
            new CardDto(Guid.NewGuid(), "to be keen on", "Увлекаться чем-то", "I'm <strong>keen on</strong> learning English."),
            new CardDto(Guid.NewGuid(), "to be good at", "Хорошо уметь", "I'm <strong>good at</strong> learning English."),
            new CardDto(Guid.NewGuid(), "to be satisfied with", "Быть довольным чем-то", "I'm <strong>satisfied with</strong> the result."),
            new CardDto(Guid.NewGuid(), "to be proud of", "Гордиться чем-то", "I'm <strong>proud of</strong> my students."),
            new CardDto(Guid.NewGuid(), "to be interested in", "Интересоваться чем-то", "I'm <strong>interested in</strong> learning English."),
            new CardDto(Guid.NewGuid(), "to be fond of", "Любить что-то", "I'm <strong>fond of</strong> learning English."),
            new CardDto(Guid.NewGuid(), "to be afraid of", "Бояться чего-то", "I'm <strong>afraid of</strong> spiders."),
            new CardDto(Guid.NewGuid(), "to be good for", "Быть хорошим для", "It's <strong>good for</strong> your health."),
            new CardDto(Guid.NewGuid(), "to be bad for", "Быть плохим для", "It's <strong>bad for</strong> your health.")
        ];

        _currentCard = GetNextCard();
    }
}
