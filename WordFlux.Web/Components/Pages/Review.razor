@page "/review"
@using Humanizer
@using WordFlux.Web.Components.Shared
@inject WeatherApiClient WeatherApi
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager Navigation

<PageTitle>Review yourself</PageTitle>

<div class="container mx-auto">

    @if (IsLoading)
    {
        <p>
            <em>Loading...</em>
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
        </p>
    }
    else
    {
        if (CurrentCard == null)
        {
            <div class="card text-center">
                <div class="card-header">
                    Nothing to learn at this moment. <a href="/">Create new cards</a>
                </div>
                <div class="card-body">
                    <blockquote class="blockquote mb-0">
                        <p>A well-known quote, contained in a blockquote element.</p>
                        <footer class="blockquote-footer">Someone famous in <cite title="Source Title">Source Title</cite></footer>
                    </blockquote>
                </div>
                <div class="card-footer">
                    <button class="btn btn-outline-info" @onclick="OnInitializedAsync">
                        <i class="bi bi-bootstrap-reboot"></i>
                    </button>
                    Next review in @(TimeToNextReview?.Humanize()).
                </div>
            </div>
        }

        else
        {
            <div class="card text-center position-relative">
                <span class="badge text-bg-secondary position-absolute start-0 translate-middle">@CurrentCard.Level</span>

                @if (IsShowTranslation)
                {
                    <div class="dropdown">

                        <a class="btn btn-secondary dropdown-toggle icon-link icon-link-hover position-absolute end-0" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">

                        </a>

                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item" role="button" @onclick="DeleteCard">Delete</a>
                            </li>
                        </ul>
                    </div>
                }

                <div class="card-body">
                    <h5 class="card-title">@CurrentCard.Term</h5>
                    @if (IsShowTranslation)
                    {
                        <p class="card-text">@CurrentCard.Translations.First().Term</p>
                    }
                </div>

                @if (IsShowTranslation)
                {
                    var currentProgress = CurrentCard.GetProgressRate();
                    <div class="card-footer">
                        <div class="progress" role="progressbar" aria-label="Default striped example" aria-valuenow="@currentProgress" aria-valuemin="0" aria-valuemax="100">
                            <div class="progress-bar @(currentProgress >= 100 ? "bg-success" : "progress-bar-striped")" style="width: @currentProgress%;"></div>
                        </div>
                    </div>
                }
            </div>

            <div>
                @if (IsShowTranslation)
                {
                    <div class="row justify-content-center mt-2 mb-2">
                        <div class="col-5 col-lg-2">
                            <button type="button" class="btn btn-warning w-100" disabled="@IsRequestInProgress" @onclick="Reject">
                                Learning...
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-diamond-fill" viewBox="0 0 16 16">
                                    <path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L4.047 3.339 8 7.293l3.954-3.954L9.049.435zm3.61 3.611L8.708 8l3.954 3.954 2.904-2.905c.58-.58.58-1.519 0-2.098l-2.904-2.905zm-.706 8.614L8 8.708l-3.954 3.954 2.905 2.904c.58.58 1.519.58 2.098 0l2.905-2.904zm-8.614-.706L7.292 8 3.339 4.046.435 6.951c-.58.58-.58 1.519 0 2.098z"/>
                                </svg>
                            </button>
                        </div>

                        <div class="col-5 col-lg-2">
                            <button type="button" class="btn btn-success w-100" disabled="@IsRequestInProgress" @onclick="Approve">
                                I know this
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
                                    <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
                                </svg>
                            </button>
                        </div>


                    </div>

                    <TranslationExamples OnTermSearch="SearchForTerm" Translations="CurrentCard.Translations" OnMakePrimary="MakePrimary" OnRemoveTranslation="RemoveTranslation"/>
                }

                else
                {
                    <div class="row justify-content-center mt-2 mb-2">
                        <div class="col-5 col-lg-2">
                            <button type="button" class="btn btn-outline-primary w-100" @onclick="ShowTranslation">Show translation</button>
                        </div>

                    </div>
                }
            </div>
        }
    }


</div>

@code {
    CardDto? CurrentCard { get; set; }
    CardDto? NextCard { get; set; }
    bool IsLoading { get; set; } = true;
    bool IsShowTranslation { get; set; }
    bool IsRequestInProgress { get; set; }
    TimeSpan? TimeToNextReview { get; set; }

    RenderFragment StringToHtml(string htmlString)
    {
        return b => b.AddMarkupContent(0, htmlString);
    }

    async Task SearchForTerm(TranslationItem item)
    {
        Navigation.NavigateTo("/?term=" + item.Term);
    }

    async Task MakePrimary(TranslationItem item)
    {
        CurrentCard!.Translations.Remove(item);
        CurrentCard.Translations.Insert(0, item);

        await WeatherApi.UpdateCard(new CardRequest(CurrentCard.Term, CurrentCard.Level, CurrentCard.Translations), CurrentCard.Id);
    }

    async Task RemoveTranslation(TranslationItem item)
    {
        CurrentCard!.Translations.Remove(item);

        await WeatherApi.UpdateCard(new CardRequest(CurrentCard.Term, CurrentCard.Level, CurrentCard.Translations), CurrentCard.Id);
    }

    private async Task Approve()
    {
        var cardId = CurrentCard!.Id;
        IsRequestInProgress = true;
        await LoadNext();
        await WeatherApi.ApproveCard(cardId);

        IsRequestInProgress = false;
    }

    void ShowTranslation()
    {
        IsShowTranslation = true;
    }

    private async Task Reject()
    {
        var cardId = CurrentCard!.Id;

        IsRequestInProgress = true;

        await LoadNext();
        await WeatherApi.RejectCard(cardId);
        IsShowTranslation = true;
    }

    private async Task LoadNext()
    {
        IsShowTranslation = false;
        CurrentCard = NextCard;
        NextCard = await WeatherApi.GetNextCard(1);

        StateHasChanged();

        await GetTimeToNextReview();
    }

    private async Task GetTimeToNextReview()
    {
        if (CurrentCard == null)
        {
            TimeToNextReview = await WeatherApi.GetNextReviewTime();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentCard = await WeatherApi.GetNextCard();
        NextCard = await WeatherApi.GetNextCard(1);
        await GetTimeToNextReview();

        IsLoading = false;
    }

    private async Task DeleteCard()
    {
        await WeatherApi.DeleteCard(CurrentCard!.Id);

        await LoadNext();
    }

}