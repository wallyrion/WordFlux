@page "/"
@using System.Text.RegularExpressions
@using WordFlux.Web.Components.Shared
@using WordFlux.Web.Storage
@inject WeatherApiClient WeatherApi
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<div class="container">

    @if (Translation != null && !string.IsNullOrWhiteSpace(Translation.SuggestedTerm) && !Translation.SuggestedTerm.Equals(Term, StringComparison.InvariantCultureIgnoreCase))
    {
        <div>No found results for <span class="text-secondary">@Term</span>. Showing results for <span class="text-info">@Translation.SuggestedTerm </span></div>
    }


    <div class="mb-3 position-relative">

        @if (Level != null)
        {
            <span class="badge text-bg-secondary position-absolute start-0 translate-middle">@Level</span>

        }
        <textarea @bind="Term" class="form-control @EnabledState()" placeholder="What do you want to memorize?" aria-label="term"></textarea>
    </div>

    @if (Translation != null && Translation.Translations != null)
    {
        <div class="container-fluid m-2">
            @foreach (var item in Translation.Translations)
            {
                <h5 class="d-inline me-1"><span class="badge text-bg-secondary">@item</span></h5>
            }
        </div>
    }

    <button type="button" class="btn btn-outline-secondary me-1 @EnabledState()" @onclick="Reset">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
        </svg>
    </button>

    @if (IsLoading)
    {
        <button class="btn btn-outline-info @EnabledState()" type="button" disabled>
            <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
            <span role="status">Loading...</span>
        </button>
    }
    else
    {
        <button type="button" class="btn btn-outline-info @EnabledState()" @onclick="TryItOut">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
            </svg>
            <span > Try it!</span>
        </button>
    }
    @if (Translation != null && Translation.Translations != null)
    {
        @if (IsSaved)
        {
            <button type="button" class="btn btn-warning ms-1 disabled">
                ✔️
                <span class=""> Saved to cards</span>
            </button>
        }
        else
        {
            <button type="button" class="btn btn-outline-warning ms-1 @EnabledState()" @onclick="SaveToCards">
                ✔️
                <span class=""> Save to cards</span>
            </button>
        }
    }

    
    @if(IsExamplesLoading)
    {
        <div class="mt-5">Getting usage examples</div>
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only"></span>
        </div>
    }
    @if (Examples.Count > 0)
    {
        <TranslationExamples OnTermSearch="SearchForTerm" Translations="Examples" OnMakePrimary="MakePrimary" OnRemoveTranslation="RemoveTranslation"
                             />
    }


  

</div>


@code {


    [SupplyParameterFromQuery(Name = "term")]
    string? Term { get; set; }

    bool IsLoading { get; set; }
    bool IsExamplesLoading { get; set; }
    bool IsSaved { get; set; }

    SimpleTranslationResult? Translation { get; set; }
    string? Level { get; set; }
    List<TranslationItem> Examples { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Term))
        {
            await TryItOut();
        }
    }

    async Task SearchForTerm(TranslationItem item)
    {
        Term = item.Term;

        await TryItOut();
    }
    
    async Task MakePrimary(TranslationItem item)
    {
        Examples.Remove(item);
        Examples.Insert(0, item);
    }
    
    async Task RemoveTranslation(TranslationItem item)
    {
        if (Examples.Count == 1)
        {
            return;
        }
        
        Examples.Remove(item);
    }

    async Task TryItOut()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Term))
            {
                return;
            }

            IsLoading = true;
            IsSaved = false;
            Translation = null;
            Level = null;
            Examples = [];


            Navigation.NavigateTo(
                Navigation.GetUriWithQueryParameter("term", Term));
        
            Translation = await WeatherApi.GetSimpleTranslations(Term);
            IsLoading = false;
            IsExamplesLoading = true;

            StateHasChanged();
        
            Level = await WeatherApi.GetLevel(Term);;
            StateHasChanged();


            var term = string.IsNullOrWhiteSpace(Translation.SuggestedTerm) ? Term : Translation.SuggestedTerm;
            Examples = await WeatherApi.GetTranslationExamples(term, Translation.Translations);
        }
        finally
        {
            IsLoading = false;
            IsExamplesLoading = false;
        }
    }
    
    

    void Reset()
    {
        Term = null;
        Translation = null;

        Navigation.NavigateTo(
            Navigation.GetUriWithQueryParameter("term", (string?)null));
    }

    // example: "This is a *bold* text"
    static string ConvertAserisksToBold(string text)
    {
        // This pattern looks for text surrounded by asterisks (*)
        string pattern = @"\*(.*?)\*";

        // Replace the asterisks and the text between them with the <strong> HTML tag
        string result = Regex.Replace(text, pattern, "<strong>$1</strong>");

        return result;
    }

    string EnabledState() => IsLoading ? "disabled" : "";

    async Task SaveToCards()
    {
        if (Translation == null)
        {
            return;
        }

        var term = string.IsNullOrWhiteSpace(Translation.SuggestedTerm) ? Term : Translation.SuggestedTerm;
        var cardRequest = new CardRequest(term, "A0", Examples);
        await WeatherApi.SaveNewCard(cardRequest);

        IsSaved = true;
    }

}