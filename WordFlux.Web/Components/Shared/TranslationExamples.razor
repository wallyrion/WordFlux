
<div>

    @foreach (var translation in Translations)
    {
    @*<div class="card mt-1">
                    <div class="card-header">
                        <h2>@translation.Term</h2>
                    </div>
                    <div class="card-body">
                        <blockquote class="blockquote mb-0">
                            <p>@StringToHtml(translation.ExampleTranslated)</p>
                            <footer class="blockquote-footer">@StringToHtml(translation.ExampleOriginal)</footer>
                        </blockquote>
                    </div>
                </div>*@

    <div class="card mt-1">
        <div class="card-header">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-fire position-absolute end-0 @GetFireColor(translation)" viewBox="0 0 16 16">
                <path d="M8 16c3.314 0 6-2 6-5.5 0-1.5-.5-4-2.5-6 .25 1.5-1.25 2-1.25 2C11 4 9 .5 6 0c.357 2 .5 4-2 6-1.25 1-2 2.729-2 4.5C2 14 4.686 16 8 16m0-1c-1.657 0-3-1-3-2.75 0-.75.25-2 1.25-3C6.125 10 7 10.5 7 10.5c-.375-1.25.5-3.25 2-3.5-.179 1-.25 2 1 3 .625.5 1 1.364 1 2.25C11 14 9.657 15 8 15"/>
            </svg>
            <h4>
                <button class="btn btn-link btn-lg p-0 text-decoration-none" @onclick="() => SearchTerm(translation)">@translation.Term</button>
            </h4>
        </div>
        <div class="card-body">
            @*<div
                            class="progress @itemPopularity(translation)"
                            role="progressbar" aria-label="Example 2px high" aria-valuenow="@translation.Popularity" aria-valuemin="0" aria-valuemax="100" style="height: 5px">
                            <div class="progress-bar" style="width: @translation.Popularity%"></div>
                        </div>*@

            <p class="card-text">@StringToHtml(translation.ExampleTranslated)</p>
            <blockquote class="blockquote mb-0">
                <footer class="blockquote-footer">@StringToHtml(translation.ExampleOriginal)</footer>
            </blockquote>
        </div>
    </div>
    }
</div>


@code {
    private int currentCount = 0;

    [Parameter] public EventCallback<TranslationItem> OnTermSearch { get; set; }
    [Parameter] public List<TranslationItem> Translations { get; set; }


    async Task SearchTerm(TranslationItem item)
    {
        await OnTermSearch.InvokeAsync(item);
    }

    static string GetFireColor(TranslationItem item)
        => $"{item.Popularity switch { > 90 => "text-danger", > 70 => "text-warning", > 40 => "text-success", _ => "text-primary" }}";

    static RenderFragment StringToHtml(string htmlString)
    {
        return b => b.AddMarkupContent(0, htmlString);
    }
    
    private void IncrementCount()
    {
        currentCount++;
    }
}
