@using System.Text.RegularExpressions
@using WordFlux.Web.Models
@inject WeatherApiClient HttpClient

<div class="mt-4">

    @foreach (var translation in Translations.Select((value, index) => new { value, index }))
    {
        <div class="card mt-1">
            <div class="card-header position-relative">

                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-fire position-absolute end-0 top-0 @GetFireColor(translation.value)" viewBox="0 0 16 16">
                    <path d="M8 16c3.314 0 6-2 6-5.5 0-1.5-.5-4-2.5-6 .25 1.5-1.25 2-1.25 2C11 4 9 .5 6 0c.357 2 .5 4-2 6-1.25 1-2 2.729-2 4.5C2 14 4.686 16 8 16m0-1c-1.657 0-3-1-3-2.75 0-.75.25-2 1.25-3C6.125 10 7 10.5 7 10.5c-.375-1.25.5-3.25 2-3.5-.179 1-.25 2 1 3 .625.5 1 1.364 1 2.25C11 14 9.657 15 8 15"/>
                </svg>

                @*<a class="icon-link icon-link-hover" href="#">
                    Icon link
                    <svg class="bi" aria-hidden="true"><use xlink:href="#arrow-right"></use></svg>
                </a>*@

                <h4 class="d-inline">@translation.value.Term</h4>


                <a class="icon-link icon-link-hover fs-4 ms-1" style="--bs-icon-link-transform: translate3d(0, -.125rem, 0);" role="button" @onclick="() => MakePrimary(translation.value)">
                    <i class="bi bi-file-arrow-up">
                    </i>
                </a>

                <a class="icon-link icon-link-hover fs-4 ms-1" style="--bs-icon-link-transform: translate3d(0, -.125rem, 0);" role="button" @onclick="() => SearchTerm(translation.value)">
                    <i class="bi bi-search">
                    </i>
                </a>

                <a class="icon-link icon-link-hover fs-4 ms-1" style="--bs-icon-link-transform: translate3d(0, -.125rem, 0);" role="button" @onclick="() => RemoveTranslation(translation.value)">
                    <i class="bi bi-trash"></i>
                </a>


                @*<a class="icon-link icon-link-hover" href="#" role="button"  @onclick="() => SearchTerm(translation.value)">
                    @translation.value.Term
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-right-circle" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8m15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0M5.854 10.803a.5.5 0 1 1-.708-.707L9.243 6H6.475a.5.5 0 1 1 0-1h3.975a.5.5 0 0 1 .5.5v3.975a.5.5 0 1 1-1 0V6.707z"/>

                        <use xlink:href="#arrow-right"></use>
                    </svg>
                    
                </a>*@
                @*<button type="button" class="btn btn-link btn-lg text-decoration-none position-relative p-0">
                        <h4>@translation.value.Term</h4>

                        $1$<span class="@(translation.index != 0 ? "d-none" : "") badge text-bg-secondary"></span>#1#
                        $1$<span class="position-absolute fs-6 top-0 start-100 translate-middle badge rounded-pill bg-danger @(translation.index != 0 ? "d-none" : "")">
                            
                            <span class="visually-hidden">unread messages</span>
                        </span>#1#
                    </button> *@<span class="badge text-bg-secondary position-absolute end-0 bottom-0">@translation.value.Level</span>

            </div>
            <div class="card-body">
                <p class="card-text">@StringToHtml(translation.value.ExampleTranslated)</p>
                <blockquote class="blockquote mb-0">
                    <footer class="blockquote-footer">@StringToHtml(translation.value.ExampleOriginal)</footer>
                </blockquote>
            </div>
        </div>

        if (translation.index == 0)
        {
            <hr class="mt-4 mb-4"/>
        }
    }
</div>


<div class="card mt-1">
    <div class="card-header">
        <div class="input-group mb-3">
            <textarea @bind="TranslationInput" @bind:event="oninput" class="form-control" placeholder="How to translate?" aria-label="translation"></textarea>
            <button class="btn btn-outline-secondary" type="button" @onclick="GetExampleForCustomTranslation">
                <i class="bi bi-check2-circle"></i>
            </button>
        </div>


    </div>
    <div class="card-body">

        @*<textarea @bind-Value:event="oninput" @bind-Value="Model.ExampleTranslated" class="form-control" placeholder="Example translated" aria-label="translation"></textarea>*@
        <textarea  @bind="CustomExampleTranslated" @bind:event="oninput"  class="form-control" placeholder="Example translated" aria-label="translation-translated"></textarea>
        <textarea  @bind="CustomExampleOriginal" @bind:event="oninput" class="form-control mt-1" placeholder="Example original" aria-label="translation-original"></textarea>
    </div>


    <div class="container-fluid">
        <button type="button" class="btn btn-primary m-2" @onclick="AddMyTranslation">Add my translation</button>
    </div>
</div>


@*<div class="card-body">
        <p class="card-text">@StringToHtml(translation.value.ExampleTranslated)</p>
        <blockquote class="blockquote mb-0">
            <footer class="blockquote-footer">@StringToHtml(translation.value.ExampleOriginal)</footer>
        </blockquote>
    </div>*@




@code {
    private int currentCount = 0;

    [Parameter] public EventCallback<TranslationItem> OnTermSearch { get; set; }
    [Parameter] public EventCallback<TranslationItem> OnMakePrimary { get; set; }
    [Parameter] public EventCallback<TranslationItem> OnRemoveTranslation { get; set; }
    [Parameter] public EventCallback<TranslationItem> OnAddMyTranslation { get; set; }
    [Parameter] public List<TranslationItem>? Translations { get; set; }
    [Parameter] public string? Term { get; set; }

    private string? CustomExampleOriginal { get; set; }
    private string? CustomExampleTranslated { get; set; }
    private string? TranslationInput { get; set; }
    private TranslationItem? CustomTranslation { get; set; }

    async Task SearchTerm(TranslationItem item)
    {
        await OnTermSearch.InvokeAsync(item);
    }

    async Task RemoveTranslation(TranslationItem item)
    {
        await OnRemoveTranslation.InvokeAsync(item);
    }

    async Task MakePrimary(TranslationItem item)
    {
        await OnMakePrimary.InvokeAsync(item);
    }

    static string GetFireColor(TranslationItem item)
        => $"{item.Popularity switch { > 90 => "text-danger", > 70 => "text-warning", > 40 => "text-success", _ => "text-primary" }}";

    static RenderFragment StringToHtml(string htmlString)
    {
        var str = ConvertAserisksToBold(htmlString);

        return b => b.AddMarkupContent(0, str);
    }

    static string ConvertAserisksToBold(string text)
    {
        // This pattern looks for text surrounded by asterisks (*)
        string pattern = @"\*(.*?)\*";

        // Replace the asterisks and the text between them with the <strong> HTML tag
        string result = Regex.Replace(text, pattern, "<strong>$1</strong>");

        return result;
    }

    public async Task GetExampleForCustomTranslation()
    {
        if (string.IsNullOrWhiteSpace(TranslationInput))
        {
            return;
        }

        CustomTranslation = (await HttpClient.GetTranslationExamples(Term, [TranslationInput], "", "")).FirstOrDefault();

        CustomExampleOriginal = CustomTranslation?.ExampleOriginal;
        CustomExampleTranslated = CustomTranslation?.ExampleTranslated;

        StateHasChanged();
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    async Task AddMyTranslation()
    {
        if (string.IsNullOrWhiteSpace(TranslationInput))
        {
            return;
        }

        await OnAddMyTranslation.InvokeAsync(CustomTranslation);
        TranslationInput = null;
        CustomExampleOriginal = null;
        CustomExampleTranslated = null;
    }

    /*
    [SupplyParameterFromForm]
    public CustomTranslation? Model { get; set; } = new();
    */

    private void Submit()
    {
    }

}