@attribute [Authorize]
@using WordFLux.ClientApp.Services
@using WordFlux.Contracts
@inject WeatherApiClient ApiClient
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationState
@inject IJSRuntime JS

<!-- Button trigger modal -->


<!-- Modal -->


<div class="card deck-header">
    <div class="card-body d-flex flex-column flex-md-row justify-content-between align-items-start">
        <div class="w-100">
            @if (IsEditMode)
            {
                <!-- Input group with Save and Cancel icon buttons -->
                <div class="input-group mb-2">
                    <input type="text" class="form-control" @bind="DeckName" placeholder="Enter new deck name" aria-label="Deck name input with two button addons">

                    <!-- Save button (check icon) -->
                    <button class="btn btn-outline-success" type="button" @onclick="SaveEdit">
                        <i class="bi bi-check"></i>
                    </button>

                    <!-- Cancel button (x icon) -->
                    <button class="btn btn-outline-secondary" type="button" @onclick="CancelEdit">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }
            else
            {
                <!-- Display deck name and date when not in edit mode -->
                <h5 class="card-title mb-0">@Deck.Name</h5>
                <small class="text-muted">Created on @Deck.CreatedAt.ToString("f")</small>
            }
        </div>

        @if (!IsEditMode)
        {
            <!-- Responsive layout for buttons -->
            <div class="ms-auto mt-2 mt-md-0 d-flex flex-column align-items-start align-items-md-end w-100 w-md-auto">
                <!-- First row: toggle switch -->
                <div class="d-flex align-items-center">
                    @if (Deck.IsPublic)
                    {
                        <a role="button" @onclick="CopyLinkToDeck" class="link-secondary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover fs-6 me-2">copy link</a>
                    }

                    <div class="form-check form-switch">
                        <label class="form-check-label" for="flexSwitchCheckDefault">Public access</label>
                        <input class="form-check-input" disabled="@(!Deck.IsEditable)" checked="@Deck.IsPublic" @onchange="TogglePublic" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                    </div>


                </div>

                <!-- Second row: edit and delete buttons (only visible on larger screens) -->
                <div class="d-flex align-items-center mt-2">

                    @*<button type="button" class="btn btn-outline-primary btn-sm me-2" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                        <i class="bi bi-pencil-square"></i>
                    </button>*@

                    <!-- Edit button (pencil icon) -->
                    @*<button class="btn btn-outline-primary btn-sm me-2" @onclick="ToggleEditMode">
                        <i class="bi bi-pencil-square"></i>
                    </button>*@

                    <button class="btn btn-outline-warning btn-sm me-2" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                        <i class="bi bi-copy"></i>
                    </button>

                    @if (Deck.IsEditable && Deck.Type != DeckType.Default)
                    {
                        <button class="btn btn-outline-primary btn-sm me-1" @onclick="ToggleEditMode">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <!-- Delete button (trash icon) -->
                        <button class="btn btn-outline-danger btn-sm" @onclick="Remove">
                            <i class="bi bi-trash"></i>
                        </button>
                    }


                </div>
            </div>
        }
    </div>
</div>


<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog @(IsDuplicateInProgress ? "disabled" : "")">
        <div class="modal-content">
            <div class="modal-body">
                <input type="text" class="form-control" disabled="@IsDuplicateInProgress" @bind="DuplicateDeckName" placeholder="Enter new deck name" aria-label="Enter duplicate deck name">
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @ref="CloseButton" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" disabled="@IsDuplicateInProgress" @onclick="SaveDuplicate">Make duplicate</button>
            </div>
        </div>
    </div>
</div>


@code
{
    [Parameter] public DeckDto Deck { get; set; }
    [Parameter] public EventCallback<DeckDto> OnDeckChanged { get; set; }
    bool IsEditMode { get; set; }
    string? DeckName { get; set; }
    bool IsLoading { get; set; }
    ElementReference _copyElement;
    string? DuplicateDeckName { get; set; }
    public bool IsDuplicateInProgress { get; set; }
    public ElementReference CloseButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task Remove()
    {
        await ApiClient.RemoveDeck(Deck.Id);
        Navigation.NavigateTo("/decks");
    }

    private void ToggleEditMode()
    {
        DeckName = Deck.Name;
        IsEditMode = true;
    }

    private async Task SaveEdit()
    {
        if (string.IsNullOrWhiteSpace(DeckName))
        {
            //Error = "Field can't be empty";

            return;
        }

        IsLoading = true;
        StateHasChanged();

        await ApiClient.PatchDeck(Deck.Id, DeckName);
        var changedDeck = Deck with { Name = DeckName };
        IsEditMode = false;
        DeckName = null;

        await OnDeckChanged.InvokeAsync(changedDeck);
    }

    private void CancelEdit()
    {
        IsEditMode = false;
        DeckName = null;
    }

    private async Task TogglePublic(ChangeEventArgs arg)
    {
        var isPublic = (bool)arg.Value!;

        await ApiClient.PatchDeck(Deck.Id, isPublic: isPublic);
        var newDeck = Deck with { IsPublic = isPublic };

        await OnDeckChanged.InvokeAsync(newDeck);
    }

    private async Task DuplicateDeck(MouseEventArgs arg)
    {
    }

    private async Task SaveDuplicate()
    {
        if (string.IsNullOrWhiteSpace(DuplicateDeckName))
        {
            return;
        }

        IsDuplicateInProgress = true;
        StateHasChanged();

        var newDeck = await ApiClient.DuplicateDeck(Deck.Id, DuplicateDeckName);

        IsDuplicateInProgress = false;
        Navigation.NavigateTo($"/decks/{newDeck.Id}/cards", true);
    }

    private async Task CopyLinkToDeck()
    {
        var uri = Navigation.Uri;
        await JS.InvokeVoidAsync("clipboardCopy.copyText", uri);
    }
}