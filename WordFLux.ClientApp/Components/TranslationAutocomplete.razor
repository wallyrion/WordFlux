@using WordFLux.ClientApp.Services
@using WordFlux.Contracts

@inject ApiClient HttpClient

@*
<label for="exampleDataList" class="form-label">Datalist example</label>
*@

@*<input @bind="Term" @bind:event="oninput" class="form-control" id="exampleDataList" @onkeyup="OnKeyDown" >*@

<div class="autocomplete-container" @onfocusout="ResetAutoComplete">
    <input @bind="Term" @bind:event="oninput" @onfocus="Search" @bind:after="Search" class="form-control"  @onkeyup="OnKeyDown" id="exampleDataList" placeholder="Type to search...">

    <div class="list-group position-absolute z-1">

        @foreach (var item in AutocompleteOptions)
        {
             <button @onclick="() => SelectSuggestedAutocomplete(item.Term)" type="button" class="list-group-item list-group-item-action">@item.Term → @item.TermTranslated </button>
        }
    </div>
</div>






@code {
    private PeriodicTimer? timer = null;
    private string text;
    private int calls;
    private int totalItems;

    List<AutocompleteItem> AutocompleteOptions { get; set; } = [];
    [Parameter] public string? Term { get; set; }
    [Parameter] public string LanguageSource { get; set; } = null!;
    [Parameter] public string LanguageDestination { get; set; } = null!;
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    [Parameter] public EventCallback<string> OnTermChanged { get; set; }
    CancellationTokenSource _cancellationTokenSource = new();
    
    protected override void OnInitialized()
    {
        /*timer = new PeriodicTimer(TimeSpan.FromMilliseconds(300));*/

        /*Task.Run(async () =>
        {
            while (true)
            {
                await timer.WaitForNextTickAsync();
                SomeList.Add(DateTime.UtcNow.ToLongDateString());
                await InvokeAsync(StateHasChanged);
            }
        });*/

        base.OnInitialized();
    }

    private async Task Search()
    {
        await OnTermChanged.InvokeAsync(Term);
        await DisposePeriodicTimer();
        await _cancellationTokenSource.CancelAsync();

        if (string.IsNullOrWhiteSpace(Term))
        {
            AutocompleteOptions = [];
            return;
        }

        Task.Run(async () =>
        {
            Console.WriteLine("Creating new timer");
            _cancellationTokenSource = new();
            using var periodicTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(300));
            var tick = await periodicTimer.WaitForNextTickAsync(_cancellationTokenSource.Token);

            Console.WriteLine("Ticking " + tick);

            if (tick)
            {
                await SearchForCompletions(Term, _cancellationTokenSource.Token);
                await DisposePeriodicTimer();
            }
            
        });
    }

    private async Task SearchForCompletions(string str, CancellationToken token)
    {
        //var completions = await HttpClient.SearchForCompletions(str);

        var completions = await HttpClient.SearchForCompletionsWithTranslations(str, LanguageSource, LanguageDestination, token);
        AutocompleteOptions = completions.Items;
        //AutocompleteOptions = completions.Completions;
        await InvokeAsync(StateHasChanged);
        /*if (timer != null)
        {
            
            
        }*/

    }

    private async Task DisposePeriodicTimer()
    {
        Console.WriteLine("Disposing periodic timer");
        timer?.Dispose();
        timer = null;
    }


    private async Task SelectSuggestedAutocomplete(string item)
    {
        await OnSearch.InvokeAsync(item);
        AutocompleteOptions = [];
    }

    private async Task ResetAutoComplete()
    {
        await _cancellationTokenSource.CancelAsync();
        await Task.Delay(200);
        AutocompleteOptions = [];
        
        /*Task.Run(async () =>
        {
            Console.WriteLine("Reset auto complete");
            await DisposePeriodicTimer();
            await Task.Delay(100);
            AutocompleteOptions = [];
            await InvokeAsync(StateHasChanged);
        });*/

    }

  

    private async Task OnKeyDown(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            AutocompleteOptions = [];
            await OnSearch.InvokeAsync(Term);
        }
    }

}