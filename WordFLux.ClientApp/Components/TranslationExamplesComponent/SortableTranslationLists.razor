@using WordFLux.ClientApp.Components.DragAndDropSortable
@using WordFlux.Contracts

<SortableList
    Group="sharedLists" Items="SelectedItems" Context="item" Handle=".drag-handle" OnUpdate="@(e => SortList(e, SelectedItems))" OnRemove="SelectedItemsRemove">
    <SortableItemTemplate>
        <div class="d-flex drag-item">
            <div class="">
                <div class="drag-handle mr-4">
                    <i class="bi bi-grip-vertical fs-1"></i>
                </div>
            </div>

            <div class="w-100">
                @if (CardTemplate != null)
                {
                    @CardTemplate(item)
                }
            </div>
        </div>

    </SortableItemTemplate>
</SortableList>

@if (IsMoveBetweenListsPossible)
{
    <hr class="mb-0"/>
    <div class="text-center">
        <i class="bi bi-arrow-down-up"></i>
        <span>You can drag & drop translations to select what to save with the card.</span>

    </div>
    <hr class="mt-0"/>

    <SortableList
        Group="sharedLists" Items="NotSelectedItems" Context="item" Handle=".drag-handle" OnUpdate="@(e => SortList(e, NotSelectedItems))" OnRemove="NotSelectedItemsRemove">
        <SortableItemTemplate>
            <div class="d-flex drag-item">
                <div class="">
                    <div class="drag-handle mr-4">
                        <i class="bi bi-grip-vertical fs-1"></i>
                    </div>
                </div>

                <div class="w-100">
                    @if (CardTemplate != null)
                    {
                        @CardTemplate(item)
                    }
                </div>
            </div>

        </SortableItemTemplate>
    </SortableList>
}


@code
{
    [Parameter] public RenderFragment<(CardTranslationItem value, int index)>? CardTemplate { get; set; }
    [Parameter] public List<(CardTranslationItem value, int index)> Items { get; set; } = [];
    [Parameter] public EventCallback<(List<CardTranslationItem>, bool isOrderChanged)> OnItemsReordered { get; set; }
    [Parameter] public bool IsMoveBetweenListsPossible { get; set; } = true;

    List<(CardTranslationItem value, int index)> SelectedItems { get; set; } = [];
    List<(CardTranslationItem value, int index)> NotSelectedItems { get; set; } = [];

    protected override void OnParametersSet()
    {
        SelectedItems = IsMoveBetweenListsPossible ? Items.Where(x => x.value.IsSelected).ToList() : Items;
        NotSelectedItems = IsMoveBetweenListsPossible ? Items.Where(x => !x.value.IsSelected).ToList() : [];
    }

    private async Task SortList((int oldIndex, int newIndex) indices, List<(CardTranslationItem value, int index)> items)
    {
        var (oldIndex, newIndex) = indices;

        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);
        
        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }

        StateHasChanged();

        await TriggerReorder(true);
    }

    private async Task TriggerReorder(bool isOrderChanged)
    {
        var reordered = SelectedItems.Concat(NotSelectedItems);
        await OnItemsReordered.InvokeAsync((reordered.Select(x => x.value).ToList(), isOrderChanged));
    }
    

    private async Task SelectedItemsRemove((int oldIndex, int newIndex) indices)
    {
        var item = SelectedItems[indices.oldIndex];
        item.value.IsSelected = false;
        StateHasChanged();
        await TriggerReorder(false);

    }

    private async Task NotSelectedItemsRemove((int oldIndex, int newIndex) indices)
    {
        var item = NotSelectedItems[indices.oldIndex];
        item.value.IsSelected = true;
        StateHasChanged();
        
        await TriggerReorder(false);

    }
}