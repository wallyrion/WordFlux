@using WordFLux.ClientApp.Services
@using WordFlux.Contracts
@using WordFLux.ClientApp.Pages.Shared
@using WordFLux.ClientApp.Utils
@using WordFLux.ClientApp.Components.TranslationExamplesComponent
@using WordFLux.ClientApp.Extensions
@using WordFLux.ClientApp.Pages.CardDetails
@inject IJSRuntime JsRuntime
@inject ApiClient ApiClient
@inject NavigationManager Navigation

@if (Card != null)
{
    <div class="d-flex align-items-start gap-5 mb-1">
        <button type="button" class="btn ms-1 disabled mb-2">
            ✔️
            <span class=""> @Card.DeckName</span>
        </button>
        
        @if (Card.SourceLang != null && Card.TargetLang != null)
        {
            <div class="d-inline-block">
                <span class="badge rounded-pill text-bg-primary">@Card.SourceLang</span>
                <i class="bi bi-arrow-right"></i>
                <span class="badge rounded-pill text-bg-secondary">@Card.TargetLang</span>
            </div>
        }

    </div>
    
    @if (IsEditMode)
    {
        <div class="input-group mb-2">
            <input type="text" class="form-control" @bind="EditTerm" placeholder="Enter anything that you want to memorize" aria-label="Term">

            <button class="btn btn-outline-success" type="button" @onclick="SaveEdit">
                <i class="bi bi-check"></i>
            </button>

            <button class="btn btn-outline-secondary" type="button" @onclick="CancelEdit">
                <i class="bi bi-x"></i>
            </button>
        </div>
    }
    else
    {
        <div class="card term-header position-relative">
            <div class="card-body">
                @Card.Term
            </div>

            <div class="term-header-buttons z-1 position-absolute top-0 end-0 translate-middle">
                <Tooltip Title="Edit term of the card">
                    <button @onclick="StartEditingTerm" class="btn btn-outline-primary btn-icon-sm">
                        <i class="bi bi-pencil-square"></i>
                    </button>
                </Tooltip>
       

                <button class="btn dropdown-toggle btn-outline-success btn-icon-sm btn-icon-menu-sm " type="button" data-bs-toggle="dropdown" aria-expanded="false"> <i class="bi bi-list"></i></button>

                <ul class="dropdown-menu">
                    <li>
                        <button class="btn dropdown-item btn-outline-danger" @onclick="RemoveCard">
                            <i class="bi bi-trash text-danger"></i> Remove card
                        </button>
                    </li>

                    <li>
                        <button class="btn dropdown-item btn-outline-secondary" @onclick="RedirectToNewSearch">
                            <i class="bi bi-search"></i> Search for @Card.Term.TruncateWithEllipsis()
                        </button>
                    </li>

                    <li>
                        <button class="btn dropdown-item btn-outline-secondary" @onclick="OpenImageModal">
                            <i class="bi bi-card-image"></i> Add image
                        </button>
                    </li>

                    <li>
                        <a class="btn dropdown-item btn-outline-secondary" @onclick="async() => await OnPageRedirected.InvokeAsync()" href="/card/@Card.Id">
                            <i class="bi bi-aspect-ratio"></i> Open card page
                        </a>

                    </li>

                </ul>

            </div>

            @{
                var currentProgress = Card.GetProgressRate();

                <div class="card-footer">
                    <div class="progress" role="progressbar" aria-label="Default striped example" aria-valuenow="@currentProgress" aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-bar @(currentProgress >= 100 ? "bg-success" : "progress-bar-striped")" style="width: @currentProgress%;"></div>
                    </div>
                </div>
            }
        </div>
    }

    @if (Card.ImageUrl != null)
    {
        <div class="d-flex justify-content-center mt-2">
            <div class="col-12 col-md-6 col-lg-6 position-relative image-container" style="max-width:360px;">
                <img src="@Card.ImageUrl" class="img-fluid img-thumbnail" alt="Selected image that describes term" />
            
                <!-- Small buttons with icons that show on hover -->
                <div class="position-absolute top-0 end-0 m-2 image-buttons">
                    <button class="btn btn-danger btn-sm me-1" @onclick="RemoveImage">
                        <i class="bi bi-trash"></i>
                    </button>
                    <button class="btn btn-secondary btn-sm" @onclick="EditImage">
                        <i class="bi bi-pencil"></i>
                    </button>
                </div>
            </div>
        </div>
    }

    <SearchImageModal @ref="SearchImageModalRef" OnImageSelected="ImageSelected"/>
    
    
    <TranslationExamples
        OnItemsReordered="async args => await ItemsSortingChanged(args.Item1, args.isOrderChanged)"
        IsMoveBetweenListsPossible="@false"
        Term="@Card.Term"
        OnTermSearch="SearchForTerm"
        Translations="Card.Translations"
        OnMakePrimary="MakePrimary"
        OnReplaceTranslation="ReplaceTranslation"
        OnRemoveTranslation="RemoveTranslation"/>

    <div class="mt-2">
        <EditTranslation
            Term="@Card.Term"
            OnAddMyTranslation="AddMyTranslation"/>
    </div>
 
    <p class="mt-5">
        <button class="btn btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
            Tasks >>>>
        </button>
    </p>
    <div class="collapse" id="collapseExample">
        <CardTasks OnRegenerateChallenges="RegenerateChallenges" Card="Card"/>
    </div>
}
else
{
    <div class="spinner-grow" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}




@code
{
    CardDto? Card { get; set; }

    [Parameter] public Guid CardId { get; set; }
    [Parameter] public CardDto? PredefinedCard { get; set; }
    [Parameter] public EventCallback<CardDto> OnCardChanged { get; set; }
    [Parameter] public EventCallback<Guid> OnCardDeleted { get; set; }
    [Parameter] public EventCallback<string> OnPageRedirected { get; set; }
    bool IsEditMode { get; set; }
    string? EditTerm { get; set; }
    ElementReference ImageModalRef { get; set; }
    ElementReference CloseImageModalButtonRef { get; set; }
    SearchImageModal SearchImageModalRef { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Card = PredefinedCard ?? await ApiClient.GetCard(CardId);
    }

    private async Task SearchForTerm(string term)
    {
        await OnPageRedirected.InvokeAsync(term);
        Navigation.NavigateTo("/?term=" + term);
    }

    private async Task MakePrimary(CardTranslationItem item)
    {
        Card!.Translations.Remove(item);
        Card.Translations.Insert(0, item);

        var pathCardRequest = new PatchCardRequest
        {
            Translations = Card.Translations
        };
        await ApiClient.PatchCard(pathCardRequest, Card!.Id);
    }

    private async Task ReplaceTranslation((CardTranslationItem oldItem, CardTranslationItem newItem) arg)
    {
        var replaceIndex = Card.Translations.FindIndex(x => ReferenceEquals(x, arg.oldItem));

        Card.Translations[replaceIndex] = arg.newItem;

        var pathCardRequest = new PatchCardRequest
        {
            Translations = Card.Translations
        };
        await ApiClient.PatchCard(pathCardRequest, Card!.Id);
    }

    private async Task RemoveTranslation(CardTranslationItem item)
    {
        Card!.Translations.Remove(item);
        
        var pathCardRequest = new PatchCardRequest
        {
            Translations = Card.Translations
        };
        await ApiClient.PatchCard(pathCardRequest, Card!.Id);
    }

    private async Task AddMyTranslation(CardTranslationItem item)
    {
        Card!.Translations.Insert(0, item);

        await ApiClient.UpdateCard(new CardRequest(Card.Term, Card.Level, Card.Translations), Card.Id);
    }

    private void StartEditingTerm()
    {
        IsEditMode = true;
        EditTerm = Card!.Term;
    }

    private async Task SaveEdit()
    {
        if (string.IsNullOrWhiteSpace(EditTerm))
        {
            return;
        }

        var pathCardRequest = new PatchCardRequest
        {
            Term = EditTerm
        };
        await ApiClient.PatchCard(pathCardRequest, Card!.Id);

        Card = Card with { Term = EditTerm! };
        await OnCardChanged.InvokeAsync(Card);
        EditTerm = null;
        IsEditMode = false;
    }

    private void CancelEdit()
    {
        EditTerm = null;
        IsEditMode = false;
    }

    private async Task RedirectToNewSearch()
    {
        await OnPageRedirected.InvokeAsync(Card!.Term);
        
        Navigation.NavigateTo($"/?term={Card!.Term}");
    }

    private async Task RemoveCard()
    {
        await ApiClient.RemoveCard(CardId);
        await OnCardDeleted.InvokeAsync(CardId);
    }

    private async Task RemoveImage()
    {
        Card = Card! with { ImageUrl = null};

        await ApiClient.RemoveImageFromCard(Card.Id);        
    }

    private async Task EditImage()
    {
        await SearchImageModalRef.OpenModal(Card!.Term);
    }

    private async Task OpenImageModal()
    {
        await SearchImageModalRef.OpenModal(Card!.Term);
    }

    private async Task ImageSelected(string imgUrl)
    {
        Card = Card with { ImageUrl = imgUrl};
        //await JsRuntime.InvokeVoidAsync("modalEvents.CloseByButton", CloseImageModalButtonRef);

        await ApiClient.UpdateCard(new CardRequest(Card.Term, Card.Level, Card.Translations, ImageUrl: Card.ImageUrl), Card.Id);
    }

    private async Task ItemsSortingChanged(List<CardTranslationItem> items, bool argsIsOrderChanged)
    {
        Card = Card with { Translations = items };
        StateHasChanged();
        
        await ApiClient.UpdateCard(new CardRequest(Card.Term, Card.Level, Card.Translations), Card.Id);
    }

    private async Task RegenerateChallenges()
    {
        await ApiClient.RegenerateCardChallenges(CardId);
    }
}