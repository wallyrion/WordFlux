@using WordFLux.ClientApp.Services
@using WordFlux.Contracts
@inject ApiClient ApiClient
@inject IJSRuntime JsRuntime

<div class="grid-container">
    @ChildContent
    
    @foreach (var card in Cards)
    {

        <div class="card shadow-sm position-relative">
            <div class="card-body">
                <h5 class="card-title text-primary">@card.Term</h5>
                <p class="card-text pre-wrap">@card.Translations.FirstOrDefault()?.Term</p>
            </div>

            <!-- Button block that appears just below the card on hover -->
            <div class="card-buttons">
                @if (@IsEditable)
                {
                    <button class="btn btn-outline-danger m-1" @onclick="() => RemoveCard(card)" title="Remove">
                        <i class="bi bi-trash"></i>
                    </button>
                }

                <button class="btn btn-outline-secondary m-1"
                        @onclick="() => ShowDetails(card)"
                        title="Details">
                    <i class="bi bi-info-circle"></i>
                </button>
            </div>
        </div>
    }
</div>



<div class="modal fade" @ref="CardDetailsModalRef" id="cardDetailsModal"  data-bs-backdrop="static" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" @ref="CloseButtonRef" class="btn-close" data-bs-target="cardDetailsModal" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                @if (ExpandedCardId != null)
                {
                    <CardDetails OnPageRedirected="PageRedirected" OnCardDeleted="CardDeleted" OnCardChanged="CardChanged" CardId="ExpandedCardId.Value"/>
                }

            </div>
            <div class="modal-footer">
                <button type="button" id="closeCardDetailsButtonTest" data-bs-target="cardDetailsModal" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                @*<button type="button" class="btn btn-primary">Save changes</button>*@
            </div>
        </div>
    </div>
</div>


@code
{
    [Parameter] public List<CardDto> Cards { get; set; } = [];
    [Parameter] public bool IsEditable { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback RefreshCards { get; set; }
    
    private ElementReference CardDetailsModalRef { get; set; }
    private ElementReference CloseButtonRef { get; set; }
    Guid? ExpandedCardId { get; set; }

    private async Task RemoveCard(CardDto card)
    {
        await ApiClient.RemoveCard(card.Id);
    }
    
    private async Task ShowDetails(CardDto card)
    {
        await JsRuntime.InvokeVoidAsync("modalEvents.open", "cardDetailsModal");
        ExpandedCardId = card.Id;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("modalEvents.Initialize", CardDetailsModalRef, DotNetObjectReference.Create(this), "CardDetails.modalClosed");
        }
    }
    
    [JSInvokable("CardDetails.modalClosed")]
    public void OnModalClosed()
    {
        ExpandedCardId = null;
        InvokeAsync(StateHasChanged);
    }
    
    private async Task CloseModalDialog()
    {
        await JsRuntime.InvokeVoidAsync("modalEvents.closeByButton", CloseButtonRef);
    }
    
    private async Task CardDeleted(Guid cardId)
    {
        Cards = Cards.Where(c => c.Id != cardId).ToList();

        await CloseModalDialog();
    }
    
    private Task PageRedirected()
    {
        return CloseModalDialog();
    }
    
    private void CardChanged(CardDto card)
    {
        var cardIndex = Cards.FindIndex(c => c.Id == card.Id);

        Cards[cardIndex] = card;
    }
}
