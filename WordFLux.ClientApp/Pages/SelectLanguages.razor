@page "/lang"
@using WordFLux.ClientApp.Storage
@using WordFLux.ClientApp.Components
@using WordFlux.Contracts
@inject LocalStorage Storage
<PageTitle>Choose languages</PageTitle>

<div class="container">

    <div class="container">
        <div class="row row-cols-1 row-cols-md-2">
            <!-- Left Column (aligned to the right on desktop, left on mobile) -->
            <div class="col-md-6 d-flex justify-content-md-end justify-content-start">
                <div class="input-group mb-3">
                    <label class="input-group-text">Your native language:</label>
                    <SelectLanguageDropdown
                        IsFullNameLabelShown="@true"
                        OnLanguageSelected="@(e => LanguageSelected(e, true))"
                        PredefinedLanguageCode="@NativeLanguage"
                        IsNative="@true">
                    </SelectLanguageDropdown>
                </div>
            </div>

            <!-- Right Column (aligned to the left on both desktop and mobile) -->
            <div class="col-md-6 d-flex justify-content-md-start justify-content-start">
                <div class="input-group mb-3">
                    <label class="input-group-text">Language you study:</label>
                    <SelectLanguageDropdown
                        IsFullNameLabelShown="@true"
                        OnLanguageSelected="@(e => LanguageSelected(e, false))"
                        PredefinedLanguageCode="@StudyingLanguage"
                        IsNative="@false">
                    </SelectLanguageDropdown>
                </div>
            </div>
        </div>
    </div>







    @*<div class="input-group mb-3">
        <label class="input-group-text" for="selectStudying">Language you study:</label>
        <select class="form-select" id="selectStudying" @onchange="SelectStudying">
            <option selected="@(StudyingLanguage == null)">None</option>
            @foreach (var option in LanguageOptions)
            {
                <option selected="@(option.Code == StudyingLanguage)" value="@option.Code">@option.Name</option>
            }
        </select>
    </div>*@

</div>


@code {
    string? NativeLanguage { get; set; }
    string? StudyingLanguage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var langs = await Storage.GetMyLanguages();

        NativeLanguage = langs.native;
        StudyingLanguage = langs.studing;

        await base.OnInitializedAsync();
    }
    
    record LanguageOption(string Name, string Code);

    private async Task SelectNative(ChangeEventArgs obj)
    {
        var langCode = obj.Value as string;

        await Storage.SaveNativeLanguage(langCode!);
    }
    private async Task SelectStudying(ChangeEventArgs obj)
    {
        var langCode = obj.Value as string;

        await Storage.SaveStudyingLanguage(langCode!);
    }

    private async Task LanguageSelected(SupportedLanguage lang, bool isNative)
    {
        if (isNative)
        {
            NativeLanguage = lang.Code;
            await Storage.SaveNativeLanguage(lang.Code);
        }
        else
        {
            StudyingLanguage = lang.Code;
            await Storage.SaveStudyingLanguage(lang.Code);
        }
    }

}




