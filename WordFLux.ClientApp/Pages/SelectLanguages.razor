@page "/lang"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WordFLux.ClientApp.Services
@using WordFLux.ClientApp.Storage
@inject LocalStorage Storage
<PageTitle>Choose languages</PageTitle>
@inject IJSRuntime JSRuntime

@inject WeatherApiClient ApiClient

<div class="container">

    <div class="input-group mb-3">
        <label class="input-group-text" for="selectNative">Your native language:</label>
        <select class="form-select" id="selectNative" @onchange="SelectNative">
            <option selected="@(NativeLanguage == null)">None</option>
            @foreach (var option in LanguageOptions)
            {
                <option selected="@(option.Code == NativeLanguage)" value="@option.Code">@option.Name</option>
            }
        </select>
    </div>
    <div class="input-group mb-3">
        <label class="input-group-text" for="selectStudying">Language you study:</label>
        <select class="form-select" id="selectStudying" @onchange="SelectStudying">
            <option selected="@(StudyingLanguage == null)">None</option>
            @foreach (var option in LanguageOptions)
            {
                <option selected="@(option.Code == StudyingLanguage)" value="@option.Code">@option.Name</option>
            }
        </select>
    </div>
    
    
    <div>
        <p>My id:</p>
        <p>@MyId</p>
    </div>


</div>


@code {

    static readonly List<LanguageOption> LanguageOptions =
    [
        new("Russian", "ru-RU"),
        new("Ukrainian", "uk-UA"),
        new("English", "en-US"),
        new("Croatian", "hr-HR"),
        new("Spain", "es-ES"),
    ];

    string? NativeLanguage { get; set; }
    string? StudyingLanguage { get; set; }
    
    Guid? MyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _ = RequestNotificationSubscriptionAsync();

        MyId = await Storage.GetMyId();
        
        var langs = await Storage.GetMyLanguages();

        NativeLanguage = langs.native;
        StudyingLanguage = langs.studing;

        await base.OnInitializedAsync();
    }
    
    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");

        await ApiClient.SubscribeToNotification(subscription);

        //Console.WriteLine(JsonSerializer.Serialize(subscription));
        /*if (subscription is not null)
        {
            try
            {
               // await OrdersClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }*/
    }
    
    record LanguageOption(string Name, string Code);

    private async Task SelectNative(ChangeEventArgs obj)
    {
        var langCode = obj.Value as string;

        await Storage.SaveNativeLanguage(langCode!);
    }
    private async Task SelectStudying(ChangeEventArgs obj)
    {
        var langCode = obj.Value as string;

        await Storage.SaveStudyingLanguage(langCode!);
    }

    
    public class NotificationSubscription
    {
        public int? NotificationSubscriptionId { get; set; }

        public string? UserId { get; set; }

        public string? Url { get; set; }

        public string? P256dh { get; set; }

        public string? Auth { get; set; }
    }
    
}




