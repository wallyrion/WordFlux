@page "/decks"
@attribute [Authorize]
@using WordFLux.ClientApp.Components
@using WordFLux.ClientApp.Services
@using WordFlux.Contracts
@inject ApiClient ApiClient
<PageTitle>Decks</PageTitle>


<div class="container">
    <ImportDeckModal @ref="ImportDeckModalRef" OnModalClosed="RefreshDecks"></ImportDeckModal>

    @if (IsLoading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <div class="container-fluid mb-4">
            <button type="button" class="btn btn-primary" @onclick="ImportDeckModalRef.OpenModal">
                Import <i class="bi bi-box-arrow-in-down"></i>
            </button>

            <button type="button" class="btn btn-primary ms-2" @onclick="() => IsAddDeckVisible = true"
                    data-bs-target="#exampleModal">
                Add new <i class="bi bi-journal-plus"></i>
            </button>
        </div>

        <!-- Modal -->

        @if (IsAddDeckVisible)
        {
            <div class="row mb-4">
                <div class="col-12">
                    <AddNewDeck OnSaved="RefreshDecks" OnCancelled="@(() => IsAddDeckVisible = false)"/>
                </div>
            </div>
        }

        <div class="input-group mb-3">
            <input @bind="SearchKeyword" type="text" class="form-control" placeholder="Search for your existing cards"
                   aria-label="Recipient's username" aria-describedby="search-cards">
            <button class="btn btn-outline-secondary" @onclick="ClearSearchInput" type="button" ><i class="bi bi-x"></i></button>
            <button class="btn btn-outline-secondary" @onclick="SearchForCards" type="button" id="search-cards"><i class="bi bi-search"></i></button>
        </div>

        <div class="mb-3">
            @if (SearchCardsResponse != null)
            {
                <CardsList Cards="SearchCardsResponse.Cards" IsEditable="@false"></CardsList>
            }

        </div>
        
        <div class="row mb-3">
            @foreach (var deck in DeckCollection)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <DeckTableItem Deck="deck"/>
                </div>
            }
        </div>

      
    }
</div>

@code
{
    bool IsLoading { get; set; }
    List<DeckDto> DeckCollection { get; set; } = [];
    bool IsAddDeckVisible { get; set; }
    ImportDeckModal ImportDeckModalRef { get; set; } = null!;
    string? SearchKeyword { get; set; }
    SearchCardResponse? SearchCardsResponse { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await RefreshDecks();
    }

    private async Task RefreshDecks()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();
            DeckCollection = await ApiClient.GetDecks();
        }
        finally
        {
            IsLoading = false;
            IsAddDeckVisible = false;
        }
    }

    private async Task SearchForCards()
    {
        if (string.IsNullOrWhiteSpace(SearchKeyword))
        {
            return;
        }

        SearchCardsResponse =  await ApiClient.SearchCards(SearchKeyword);
    }

    private void ClearSearchInput()
    {
        SearchKeyword = null;
        SearchCardsResponse = null;
    }
}