@page "/reviewV2"
@using System.Runtime.InteropServices
@using WordFLux.ClientApp.Extensions
@using WordFLux.ClientApp.Services
@inject LocalStorage Storage

@using WordFlux.Contracts
@using WordFLux.ClientApp.Storage
@using WordFLux.ClientApp.Components
@inject ApiClient Api
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Review yourself</PageTitle>

<div class="container mx-auto">

    <div class="d-flex justify-content-end mb-2">
        @if (Decks.Count > 0)
        {
            <DecksFilter Decks="Decks" OnFilterDecks="OnDeckFiltered" SelectedDecksIds="SelectedDecksIds"/>
        }
    </div>


    @if (IsLoading)
    {
        <p>
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
        </p>
    }
    else
    {
        if (CurrentCard == null)
        {
            <div class="card text-center">
                <div class="card-header">
                    Nothing to learn at this moment. <a href="/">Create new cards</a>
                </div>
                <div class="card-body">
                    <blockquote class="blockquote mb-0">
                        <p>@Motivation</p>
                        <footer class="blockquote-footer">OpenAI</footer>
                    </blockquote>
                </div>
                <div class="card-footer d-flex justify-content-center align-items-center">
                    <button class="btn btn-outline-info me-3" @onclick="OnInitializedAsync">
                        <i class="bi bi-bootstrap-reboot"></i>
                    </button>
                    @if (TimeToNextReview != null)
                    {
                    <span>Next review in <strong>@(TimeUtils.GetNextReviewTime(TimeToNextReview)). </strong> </span>
                    }
                </div>
            </div>
        }

        else
        {
            <div class="card text-center">
                <div class="card-body">
                    @{
                        var (frontTerm, backTerm) = GetCardTerms();
                    }
                    <h5 class="card-title pre-wrap">@frontTerm.AsHtmlContent()</h5>
                    @if (ReviewStrategy == ReviewChallenge.Image && !IsShowTranslation)
                    {
                         <img src="@CurrentCard.ImageUrl" class="img-fluid img-thumbnail" alt="Selected image that describes term" />
                    }

                    @if (IsShowTranslation)
                    {
                        <p class="card-text pre-wrap text-primary-emphasis">@backTerm.AsHtmlContent()</p>
                    }
                </div>

            </div>
                
            @if (!IsShowTranslation)
            {
                <div class="row justify-content-center mt-2 mb-2">
                    <div class="col-5 col-lg-2">
                        <button type="button" class="btn btn-outline-primary w-100" @onclick="ShowTranslation">Show translation</button>
                    </div>
                </div>
            }
            
            
            
            
            @if(IsShowTranslation)
            {
                <div class="row justify-content-center mt-2 mb-5">
                    <div class="col-6 col-lg-6 col-md-6">
                        <button type="button" class="btn btn-warning w-100" disabled="@IsRequestInProgress" @onclick="Reject">
                            Learning...
                            <i class="bi bi-x-diamond"></i>
                        </button>
                    </div>

                    <div class="col-6 col-lg-6 col-md-6">
                        <button type="button" class="btn btn-success w-100" disabled="@IsRequestInProgress" @onclick="Approve">
                            I know this
                            <i class="bi bi-check-circle"></i>
                        </button>
                    </div>
                </div>
                
                <CardDetails OnCardDeleted="LoadNext" CardId="CurrentCard.Id" PredefinedCard="CurrentCard"></CardDetails>

            }
            


        }
    }


</div>

@code {
    CardDto? CurrentCard { get; set; }
    CardDto? NextCard { get; set; }
    bool IsLoading { get; set; }
    bool IsShowTranslation { get; set; }
    bool IsShowTranslationAsBaseTerm { get; set; }
    ReviewChallenge ReviewStrategy { get; set; }
    CardTaskExample? ReviewChallengeExample { get; set; }

    bool IsRequestInProgress { get; set; } = true;
    TimeSpan? TimeToNextReview { get; set; }
    string Motivation { get; set; } = "There is no better time to learn than now";
    string? TermLearning => IsShowTranslationAsBaseTerm ? CurrentCard?.Translations.First().Term : CurrentCard?.Term;
    string? TermTranslation => IsShowTranslationAsBaseTerm ? CurrentCard?.Term : CurrentCard?.Translations.First().Term;
    
    [SupplyParameterFromQuery(Name = "deckId")]
    public Guid? DeckId { get; set; }
    List<Guid> SelectedDecksIds { get; set; } = [];
    List<DeckDto> Decks { get; set; } = [];

    private (string? frontTerm, string? backTerm) GetCardTerms()
    {
        if (CurrentCard == null)
        {
            return (null, null);
        }

        if (ReviewStrategy == ReviewChallenge.Image)
        {
            return (null, CurrentCard.Term);
        }

        if (ReviewStrategy == ReviewChallenge.ChallengeExampleNative && ReviewChallengeExample != null)
        {
            return (ReviewChallengeExample.ExampleNative, ReviewChallengeExample.ExampleLearn);
        }
        
        return (CurrentCard.Term, CurrentCard.Translations[0].Term);
    }

    private async Task Approve()
    {
        IsRequestInProgress = true;
        await Api.ApproveCard(CurrentCard!.Id);
        await LoadNext();

        IsRequestInProgress = false;
    }

    private async Task Reject()
    {
        IsRequestInProgress = true;

        await Api.RejectCard(CurrentCard!.Id);
        await LoadNext();

        IsRequestInProgress = false;
    }

    void ShowTranslation()
    {
        IsShowTranslation = true;
    }

    private async Task LoadNext()
    {
        IsShowTranslation = false;
        CurrentCard = NextCard;
        UpdateLearningStrategy();

        StateHasChanged();
        await UpdateTimeToNextReview();

        NextCard = await Api.GetNextCard(SelectedDecksIds, 1);
    }

    private async Task UpdateTimeToNextReview()
    {
        if (CurrentCard == null)
        {
            TimeToNextReview = await Api.GetNextReviewTime(SelectedDecksIds);
            Motivation = await Api.GetMotivation();
        }
        else
        {
            TimeToNextReview = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var deckFromQuery = DeckId;
        
        if (deckFromQuery != null)
        {
            SelectedDecksIds = [deckFromQuery.Value];
        }
        else
        {
            SelectedDecksIds = await Storage.GetLatestDecksSelection();
        }

        var decksTask = Task.Run(Api.GetDecks);

        await LoadInitialState();
        Decks = await decksTask;

    }

    private async Task LoadInitialState()
    {
        IsLoading = true;
        IsRequestInProgress = true;
        StateHasChanged();
        
        var currentCardTask = Task.Run(() => Api.GetNextCard(SelectedDecksIds));
        var nextCardTask = Task.Run(() => Api.GetNextCard(SelectedDecksIds, 1));
        
        CurrentCard = await currentCardTask;
        IsLoading = false;
        UpdateLearningStrategy();
        StateHasChanged();

        NextCard = await nextCardTask;
        await UpdateTimeToNextReview();

        IsRequestInProgress = false;
    }

    private void UpdateLearningStrategy()
    {
        if (CurrentCard == null)
        {
            return;
        }
        
        var possibleStrategies = new List<ReviewChallenge>
        {
            ReviewChallenge.PrimaryTranslation,
            ReviewChallenge.OriginalTerm
        };

        if (CurrentCard!.ImageUrl != null)
        {
            possibleStrategies.Add(ReviewChallenge.Image);
        }

        if (CurrentCard.CardTaskExamples.Count > 0)
        {
            possibleStrategies.Add(ReviewChallenge.ChallengeExampleNative);
        }

        var randomStrategy = Random.Shared.GetItems<ReviewChallenge>(CollectionsMarshal.AsSpan(possibleStrategies), 1)[0];

        ReviewStrategy = randomStrategy;

        ReviewChallengeExample = ReviewStrategy == ReviewChallenge.ChallengeExampleNative 
            ? Random.Shared.GetItems<CardTaskExample>(CollectionsMarshal.AsSpan(CurrentCard.CardTaskExamples), 1)[0] 
            : null;
    }

    private async Task OnDeckFiltered(List<Guid> decks)
    {
        await Storage.SaveDeckSelection(decks);
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("deckId", (string?)null));
        
        SelectedDecksIds = decks;

        await LoadInitialState();
    }

    public enum ReviewChallenge
    {
        OriginalTerm,
        PrimaryTranslation,
        ChallengeExampleNative,
        Image
    }
}