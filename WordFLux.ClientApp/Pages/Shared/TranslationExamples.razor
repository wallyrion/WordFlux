@using System.Text.RegularExpressions
@using WordFLux.ClientApp.Models
@using WordFLux.ClientApp.Services
@using WordFlux.Contracts
@inject WeatherApiClient HttpClient

<div class="mt-4">

    @foreach (var translation in Translations.Select((value, index) => new { value, index }))
    {
        <div class="card-wrapper position-relative">
            <div class="action-buttons position-absolute text-start p-2">
                @if (translation.index != 0)
                {
                    <a class="icon-link icon-link-hover fs-4 ms-1" style="--bs-icon-link-transform: translate3d(0, -.125rem, 0);" role="button" @onclick="() => MakePrimary(translation.value)">
                        <i class="bi bi-file-arrow-up">
                        </i>
                    </a>
                }

                <a class="icon-link icon-link-hover fs-4 ms-1" style="--bs-icon-link-transform: translate3d(0, -.125rem, 0);" role="button" @onclick="() => Edit(translation.index)">
                    <i class="bi bi-pencil-square"></i>
                </a>

                <a class="icon-link icon-link-hover fs-4 ms-1" style="--bs-icon-link-transform: translate3d(0, -.125rem, 0);" role="button" @onclick="() => SearchTerm(translation.value)">
                    <i class="bi bi-search">
                    </i>
                </a>

                <a class="icon-link icon-link-hover fs-4 ms-1" style="--bs-icon-link-transform: translate3d(0, -.125rem, 0);" role="button" @onclick="() => RemoveTranslation(translation.value)">
                    <i class="bi bi-trash"></i>
                </a>
            </div>

            @if (IsEditMode(translation.index))
            {
                <EditTranslation OnCancel="() => EditModes[translation.index] = false" AlwaysEditable="@true" TranslationInput="@translation.value.Term" CustomExampleOriginal="@translation.value.ExampleOriginal"
                                 CustomExampleTranslated="@translation.value.ExampleTranslated"
                                 OnAddMyTranslation="(e) => ReplaceExistingTranslation(translation.index, translation.value, e)"/>
            }
            else
            {
                <div class="card mt-1">
                    <div class="card-header position-relative">
                        <h4 class="d-inline pre-wrap">
                            @StringToHtml(@translation.value.Term)
                        </h4>
                        <span class="badge text-bg-light position-absolute end-0 bottom-0">@translation.value.Level</span>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(translation.value.ExampleOriginal) || !string.IsNullOrWhiteSpace(translation.value.ExampleTranslated))
                    {
                        <div class="card-body">
                            @if (!string.IsNullOrWhiteSpace(translation.value.ExampleTranslated))
                            {
                                <p class="card-text">
                                    <span class="position-relative">
                                        @StringToHtml(translation.value.ExampleTranslated)
                                        <span class="audio">
                                            <AudioFromText Term="@translation.value.ExampleTranslated"></AudioFromText>
                                        </span>
                                    </span>
                                </p>
                            }

                            @if (!string.IsNullOrWhiteSpace(translation.value.ExampleOriginal))
                            {
                                <blockquote class="blockquote mb-0">
                                    <footer class="blockquote-footer">
                                        <span class="position-relative">
                                            @StringToHtml(translation.value.ExampleOriginal)
                                            <span class="audio">
                                                <AudioFromText Term="@translation.value.ExampleOriginal"></AudioFromText>
                                            </span>
                                        </span>
                                    </footer>
                                </blockquote>
                            }
                        </div>
                    }
                </div>
            }


        </div>

        if (translation.index == 0)
        {
            <hr class="mt-4 mb-4"/>
        }
    }
</div>


@code {

    [Parameter] public EventCallback<string> OnTermSearch { get; set; }
    [Parameter] public EventCallback<CardTranslationItem> OnMakePrimary { get; set; }
    [Parameter] public EventCallback<CardTranslationItem> OnRemoveTranslation { get; set; }
    [Parameter] public EventCallback<(CardTranslationItem oldItem, CardTranslationItem newItem)> OnReplaceTranslation { get; set; }
    [Parameter] public List<CardTranslationItem> Translations { get; set; } = [];
    [Parameter] public string? Term { get; set; }

    private string? CustomExampleOriginal { get; set; }
    private string? CustomExampleTranslated { get; set; }
    private string? TranslationInput { get; set; }
    private CardTranslationItem? CustomTranslation { get; set; }
    Dictionary<int, bool> EditModes { get; set; } = [];

    private bool IsEditMode(int index) => EditModes.TryGetValue(index, out var isEdit) && isEdit;

    async Task SearchTerm(CardTranslationItem item)
    {
        await OnTermSearch.InvokeAsync(item.Term);
    }

    async Task RemoveTranslation(CardTranslationItem item)
    {
        await OnRemoveTranslation.InvokeAsync(item);
    }

    async Task MakePrimary(CardTranslationItem item)
    {
        await OnMakePrimary.InvokeAsync(item);
    }

    static string GetFireColor(CardTranslationItem item)
        => $"{item.Popularity switch { > 90 => "text-danger", > 70 => "text-warning", > 40 => "text-success", _ => "text-primary" }}";

    static RenderFragment StringToHtml(string htmlString)
    {
        var str = ConvertAserisksToBold(htmlString);

        return b => b.AddMarkupContent(0, str);
    }

    static string ConvertAserisksToBold(string text)
    {
        // This pattern looks for text surrounded by asterisks (*)
        string pattern = @"\*(.*?)\*";

        // Replace the asterisks and the text between them with the <strong> HTML tag
        string result = Regex.Replace(text, pattern, "<strong>$1</strong>");

        return result;
    }

    private async Task Edit(int index)
    {
        EditModes[index] = true;
    }

    private async Task ReplaceExistingTranslation(int index, CardTranslationItem existing, CardTranslationItem newTranslation)
    {
        await OnReplaceTranslation.InvokeAsync((existing, newTranslation));
        EditModes[index] = false;

    }

}