@using WordFLux.ClientApp.Services
@using WordFlux.Contracts
@inject ApiClient HttpClient


@if (AlwaysEditable || IsEditable)
{
<div class="card">
    <div class="card-header">
        <div class="input-group mb-3">
            <textarea @bind="TranslationInput" @bind:event="oninput" class="form-control" placeholder="How to translate?" aria-label="translation"></textarea>

            <Tooltip Title="Complete examples with AI">
                <button class="btn btn-outline-secondary" type="button" @onclick="GetExampleForCustomTranslation">
                    <i class="bi bi-robot"></i>
                </button>
            </Tooltip>
          
        </div>


    </div>
    <div class="card-body">

        @*<textarea @bind-Value:event="oninput" @bind-Value="Model.ExampleTranslated" class="form-control" placeholder="Example translated" aria-label="translation"></textarea>*@
        <textarea  @bind="CustomExampleTranslated" @bind:event="oninput"  class="form-control" placeholder="Example translated" aria-label="translation-translated"></textarea>
        <textarea  @bind="CustomExampleOriginal" @bind:event="oninput" style="color: #4e555b" class="form-control mt-1" placeholder="Example original" aria-label="translation-original"></textarea>
    </div>


    <div class="container-fluid m-2 d-flex justify-content-center gap-2">
        <button type="button" class="btn btn-outline-success" @onclick="AddMyTranslation">Save translation</button>
        <button class="btn btn-outline-secondary" @onclick="Cancel">Close</button>
    </div>
</div>
    
   
}
else
{
    <div class="card">
        <button type="button" class="btn btn-outline-secondary w-100" @onclick="() => IsEditable = true">Add my translation</button>
    </div>
}




@code {
    [Parameter] public EventCallback<CardTranslationItem> OnAddMyTranslation { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public string? Term { get; set; }
    [Parameter] public string? CustomExampleTranslated { get; set; }
    [Parameter] public string? CustomExampleOriginal { get; set; }
    [Parameter] public string? TranslationInput { get; set; }
    [Parameter] public bool AlwaysEditable { get; set; }
    private CardTranslationItem? CustomTranslation { get; set; }
    bool IsEditable { get; set; }

    public async Task GetExampleForCustomTranslation()
    {
        if (string.IsNullOrWhiteSpace(TranslationInput))
        {
            return;
        }

        CustomTranslation = (await HttpClient.GetTranslationExamples(Term, [TranslationInput], "", "", false)).FirstOrDefault();

        CustomExampleOriginal = CustomTranslation?.ExampleOriginal;
        CustomExampleTranslated = CustomTranslation?.ExampleTranslated;

        StateHasChanged();
    }

    async Task AddMyTranslation()
    {
        if (string.IsNullOrWhiteSpace(TranslationInput))
        {
            return;
        }

        await OnAddMyTranslation.InvokeAsync(new CardTranslationItem(TranslationInput, CustomExampleTranslated, CustomExampleOriginal));
        TranslationInput = null;
        CustomExampleOriginal = null;
        CustomExampleTranslated = null;

        IsEditable = false;
    }

    private async Task Cancel()
    {
        IsEditable = false;
        await OnCancel.InvokeAsync();
    }

}