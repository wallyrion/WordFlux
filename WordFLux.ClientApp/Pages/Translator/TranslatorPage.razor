@page "/"
@using WordFLux.ClientApp.Services
@using WordFLux.ClientApp.Components

@using WordFlux.Contracts
@inject ApiClient Api
@inject NavigationManager Navigation
@inject ConnectionHealthService ConnectionHealthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LanguageProvider LanguageProvider
@implements IDisposable

<PageTitle>Home</PageTitle>

@if (!IsOnline)
{
    <div class="container">
        <div>
            Looks you are offline. You can
            <a href="/offline/translator">
                <span>go to offline page </span>
            </a> to add items that will be automatically added to your dictionary later.
        </div>
    </div>
}

@if (IsOnline)
{
    <div class="container">
        <div class="mb-3 position-relative">
            <TranslatorSearch Level="@Level"
                              IsLoading="IsLoading"
                              UseAzureAiTranslator="UseAzureAiTranslator"
                              OnSearch="(args) => SearchForTerm(args)"
                              OnReset="() => Reset()"
                              Term="@Term"
                              TranslationResponse="Translation"
                              OnEngineChanged="e => UseAzureAiTranslator = e == TranslatorSearch.TranslationEngine.AzureAi"
                              LearnLanguageCode="@LearnLanguageCode"
                              NativeLanguageCode="@NativeLanguageCode"
                              OnLanguageChanged="LanguageChanged"
                              />

        </div>

        <div class="container-fluid m-2">
            @foreach (var item in TranslationCheeps)
            {
                <h5 class="d-inline me-1">
                    <span class="badge text-bg-secondary" style="white-space: break-spaces">@item</span>
                </h5>
            }
        </div>

        @if (SavedCard != null)
        {
            <CardDetails OnPageRedirected="SearchForTerm" OnCardDeleted="CardDeleted" PredefinedCard="SavedCard"></CardDetails>
        }
      
        @if (Translation != null && SavedCard == null)
        {
            <FoundTranslations Term="@Term" 
                               UseAzureAiTranslator="UseAzureAiTranslator"
                               Level="@Level"
                               CancellationToken="CancellationTokenSource.Token"
                               Decks="Decks"
                               Translation="Translation"
                               OnCardSaved="e => SavedCard = e"
                               IsLoading="IsLoading"
                               LearnLanguage="@LearnLanguageCode"
                               NativeLanguage="@NativeLanguageCode"
                               OnSearch="e => SearchForTerm(e)"
            />
        }
        
    </div>
}


@code {
    [SupplyParameterFromQuery(Name = "term")] string? Term { get; set; }

    CardDto? SavedCard { get; set; }
    bool IsOnline => ConnectionHealthService.IsOnline;
    bool IsLoading { get; set; }

    SimpleTranslationResponse? Translation { get; set; }
    string? Level { get; set; }
    List<DeckDto> Decks { get; set; } = [];
    CancellationTokenSource CancellationTokenSource { get; set; } = new();
    IEnumerable<string> TranslationCheeps => Translation?.Translations ?? [];
    
    [SupplyParameterFromQuery(Name = "lg_native")] string? NativeLanguageCodeFromQuery { get; set; }
    [SupplyParameterFromQuery(Name = "lg_learn")] string? LearnLanguageCodeFromQuery { get; set; }
    [SupplyParameterFromQuery(Name = "useAzureAi")] bool UseAzureAiTranslatorFromQuery { get; set; }

    bool UseAzureAiTranslator { get; set; }
    string? NativeLanguageCode{ get; set; }
    string? LearnLanguageCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NativeLanguageCode = NativeLanguageCodeFromQuery;
        LearnLanguageCode = LearnLanguageCodeFromQuery;
        UseAzureAiTranslator = UseAzureAiTranslatorFromQuery;
        /*if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("initialCount", out var _initialCount))
        {
            currentCount = Convert.ToInt32(_initialCount);
        }*/
        
        ConnectionHealthService.OnStatusChanged += () => InvokeAsync(StateHasChanged);

        await ValidateSelectedLanguages();
        
        if (!string.IsNullOrWhiteSpace(Term))
        {
            await TryItOut();
        }

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (state.User.Identity?.IsAuthenticated == true)
        {
            await RefreshDecks();
        }
    }

    private async Task ValidateSelectedLanguages()
    {
        var supportedLanguages = await LanguageProvider.GetSupportedLanguagesAsync();

        if (NativeLanguageCode != null)
        {
            NativeLanguageCode = supportedLanguages.FirstOrDefault(x => x.Code == NativeLanguageCode)?.Code;
        }
        
        if (LearnLanguageCode != null)
        {
            LearnLanguageCode = supportedLanguages.FirstOrDefault(x => x.Code == LearnLanguageCode)?.Code;
        }

        if (NativeLanguageCode == null || LearnLanguageCode == null)
        {
            var myLanguages = await LanguageProvider.GetDefaultLanguagesAsync();
            
            NativeLanguageCode = supportedLanguages.FirstOrDefault(x => x.Code == myLanguages.NativeLanguageCode)?.Code;
            LearnLanguageCode = supportedLanguages.FirstOrDefault(x => x.Code == myLanguages.LearningLanguageCode)?.Code;
        }
    }

    async Task RefreshDecks()
    {
        Decks = (await Api.GetDecks()).Where(d => d.Type == DeckType.Custom).ToList();
    }

    async Task SearchForTerm(string input)
    {
        Console.WriteLine($"SearchForTerm, input = {input}");
        Term = input;
        await TryItOut();
    }

    async Task TryItOut()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Term))
            {
                return;
            }

            IsLoading = true;
            await CancellationTokenSource.CancelAsync();
            Translation = null;
            Level = null;
            SavedCard = null;
            StateHasChanged();
            Navigation.NavigateTo(
                Navigation.GetUriWithQueryParameters(new Dictionary<string, object?> { { "term", Term }, { "lg_native", NativeLanguageCode }, { "lg_learn", LearnLanguageCode }, { "useAzureAi", UseAzureAiTranslator } }));

            CancellationTokenSource = new CancellationTokenSource();

            Translation = await Api.GetSimpleTranslations(Term, UseAzureAiTranslator,  NativeLanguageCode, LearnLanguageCode, CancellationTokenSource.Token);
            IsLoading = false;

            StateHasChanged();

            Level = await Api.GetLevel(Term, CancellationTokenSource.Token);

        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task Reset(bool shouldClearTerm = true)
    {
        await CancellationTokenSource.CancelAsync();
        SavedCard = null;

        if (shouldClearTerm)
        {
            Term = null;
        }
        
        Translation = null;
        Level = null;



        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("term", (string?)null));

    }

    public void Dispose()
    {
        ConnectionHealthService.OnStatusChanged -= StateHasChanged;
    }

    private async Task CardDeleted()
    {
        await Reset();
    }

    private void LanguageChanged((string code, bool isNative) args)
    {
        if (args.isNative)
        {
            NativeLanguageCode = args.code;
        }
        else
        {
            LearnLanguageCode = args.code;
        }
    }

}