@page "/decks/{DeckId:guid}/cards"
@attribute [Authorize]
@using WordFLux.ClientApp.Services
@using WordFlux.Contracts
@using WordFLux.ClientApp.Components
@inject WeatherApiClient ApiClient
@inject NavigationManager Navigation

<PageTitle>Decks</PageTitle>


<div class="container">
    @if (InitialStateLoading)
    {
        <div>
            Loading...
        </div>
    }
    else
    {
        @if (Deck == null)
        {
            <div class="alert alert-danger">
                We couldn't found anything on this page. <span class="emoji" style="font-size: 20px">🤷‍♀️</span>
            </div>
        }
        else
        {
            <DeckHeader Deck="Deck" OnDeckChanged="d => Deck = d"/>

            <div>
                <div class="container mt-4">
                    <div class="row">
                        <div class="grid-container">
                            @if (Deck.IsEditable)
                            {
                                <div class="card shadow-sm position-relative new-term">
                                    <div class="card-body">
                                        <form @onsubmit="SaveNewCard">
                                            <input class="form-control mb-1" type="text" @bind="NewCardTerm" placeholder="Term" aria-label="input-term">
                                            <input class="form-control mb-1" type="text" @bind="NewCardTranslation" placeholder="Translated term" aria-label="translated-input-term">

                                            <button class="btn btn-outline-success" type="submit" aria-label="Save-new-card">
                                                <i class="bi bi-check"></i>
                                            </button>
                                        </form>
                                    </div>
                                </div> 
                            }
                           
                            @foreach (var card in Cards)
                            {
                                <div class="card shadow-sm position-relative">
                                    <div class="card-body">
                                        <h5 class="card-title text-primary">@card.Term</h5>
                                        <p class="card-text pre-wrap">@card.Translations.FirstOrDefault()?.Term</p>
                                    </div>

                                    <!-- Button block that appears just below the card on hover -->
                                    <div class="card-buttons">
                                        @if (Deck.IsEditable)
                                        {
                                            <button class="btn btn-outline-danger m-1" @onclick="() => RemoveCard(card)" title="Remove">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        }
                           
                                        <button class="btn btn-outline-secondary m-1" @onclick="() => ShowDetails(card)" title="Details">
                                            <i class="bi bi-info-circle"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>


@code
{
    [Parameter] public Guid? DeckId { get; set; }
    DeckDto? Deck { get; set; }
    bool InitialStateLoading { get; set; }
    List<CardDto> Cards { get; set; } = [];
    string? NewCardTerm { get; set; }
    string? NewCardTranslation { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        InitialStateLoading = true;

        if (DeckId == Guid.Empty || DeckId == null)
        {
            return;
        }

        Deck = await ApiClient.GetDeck(DeckId.Value);

        if (Deck != null)
        {
            await LoadCards();
        }

        InitialStateLoading = false;
    }

    private async Task Edit(MouseEventArgs obj)
    {
    }

    private async Task LoadCards()
    {
        Cards = await ApiClient.GetCards(DeckId);
    }
    

    private async Task RemoveCard(CardDto card)
    {
        await ApiClient.RemoveCard(card.Id);
        
        await LoadCards();
    }

    private async Task ShowDetails(CardDto card)
    {
    }

    private async Task SaveNewCard()
    {
        if (string.IsNullOrWhiteSpace(NewCardTerm) || string.IsNullOrWhiteSpace(NewCardTranslation))
        {
            return;
        }

        var cardRequest = new CardRequest(NewCardTerm, "", [new CardTranslationItem(NewCardTranslation, null!, null!, 0, null!)], Deck!.Id);

        await ApiClient.SaveNewCard(cardRequest);
        await LoadCards();
        NewCardTerm = null;
        NewCardTranslation = null;
    }
}