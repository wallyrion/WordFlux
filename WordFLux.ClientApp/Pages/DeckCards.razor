@page "/decks/{DeckId:guid}/cards"
@attribute [Authorize]
@using WordFLux.ClientApp.Services
@using WordFlux.Contracts
@using WordFLux.ClientApp.Components
@inject ApiClient ApiClient

<PageTitle>Decks</PageTitle>


<div class="container">
    @if (InitialStateLoading)
    {
        <div>
            Loading...
        </div>
    }
    else
    {
        @if (Deck == null)
        {
            <div class="alert alert-danger">
                We couldn't found anything on this page. <span class="emoji" style="font-size: 20px">🤷‍♀️</span>
            </div>
        }
        else
        {
            <DeckHeader Deck="Deck" OnDeckChanged="d => Deck = d"/>

            <div>
                <div class="container mt-4">
                    <div class="row">
                           
                           
                            <CardsList Cards="Cards" IsEditable="Deck.IsEditable" RefreshCards="LoadCards">
                                @if (Deck.IsEditable)
                                {
                                    <div class="card shadow-sm position-relative new-term">
                                        <div class="card-body">
                                            <form @onsubmit="SaveNewCard">
                                                <input class="form-control mb-1" type="text" @bind="NewCardTerm" placeholder="Term" aria-label="input-term">
                                                <input class="form-control mb-1" type="text" @bind="NewCardTranslation" placeholder="Translated term" aria-label="translated-input-term">

                                                <button class="btn btn-outline-success" type="submit" aria-label="Save-new-card">
                                                    <i class="bi bi-check"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                }
                            </CardsList>
                    </div>
                </div>
            </div>
        }
    }
</div>


<!-- Button trigger modal -->


<!-- Modal -->



@code
{
    [Parameter] public Guid? DeckId { get; set; }
    DeckDto? Deck { get; set; }
    bool InitialStateLoading { get; set; }
    List<CardDto> Cards { get; set; } = [];
    string? NewCardTerm { get; set; }
    string? NewCardTranslation { get; set; }


    protected override async Task OnInitializedAsync()
    {
        InitialStateLoading = true;

        await LoadDeckAndCards();

        InitialStateLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        // todo check that DeckId is not null and not empty
        await LoadDeckAndCards();
        
    }

    private async Task LoadDeckAndCards()
    {
        Deck = await ApiClient.GetDeck(DeckId!.Value);

        if (Deck != null)
        {
            await LoadCards();
        }
    }
    
    
    private async Task LoadCards()
    {
        Cards = await ApiClient.GetCards(DeckId);
    }

    private async Task SaveNewCard()
    {
        if (string.IsNullOrWhiteSpace(NewCardTerm) || string.IsNullOrWhiteSpace(NewCardTranslation))
        {
            return;
        }

        var cardRequest = new CardRequest(NewCardTerm, "", [new CardTranslationItem(NewCardTranslation, null!, null!, 0, null!)], Deck!.Id);

        await ApiClient.SaveNewCard(cardRequest);
        await LoadCards();
        NewCardTerm = null;
        NewCardTranslation = null;
    }
}