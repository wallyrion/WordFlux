@page "/offline/translator"
@using BlazorApp1.Services
@using WordFlux.Contracts
@using WordFlux.Web
@inject WeatherApiClient WeatherApi
@inject NavigationManager Navigation
@inject TranslationsSyncService TranslationSyncService
@implements IDisposable

<PageTitle>Home</PageTitle>

<div class="container">


    <div class="mb-3 position-relative">

        <textarea @bind="Term" class="form-control" placeholder="What do you want to memorize?" aria-label="term"></textarea>
        
        <button class="btn btn-primary mt-2" @onclick="AddTerm">AddTerm</button>
    </div>
    
    <div class="mt-2">
        @foreach (var item in Items)
        {
        <div class="card mt-2">
            <div class="card-body d-flex justify-content-between align-items-center align-content-center">
                <div>
                    <span>@item.Term</span>
                </div>
                <div class="d-flex align-items-center align-content-center">
                    @if (item.Status == TranslationSyncStatus.InProgress)
                    {
                        <span>Sync...</span>
                        <div class="spinner-grow" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    
                </div>
                
                
            </div>
        </div>
        }
    </div>
    
    
</div>


@code {

    public string? Term { get; set; }
    public List<TranslationSyncItem> Items { get; set; } = [];
    
    protected override async Task OnInitializedAsync()
    {
        Items = await TranslationSyncService.GetAll();
        TranslationSyncService.OnStateChanged += Changed;
    }

    async void Changed()
    {
        Items = await TranslationSyncService.GetAll();
        await InvokeAsync(StateHasChanged);
    }
    
    
    async Task AddTerm()
    {
        if (string.IsNullOrWhiteSpace(Term))
        {
            return;
        }
        
        var newItem = await TranslationSyncService.Add(Term);
        
        Items.Add(newItem);
        
        Term = null;
    }

    public void Dispose()
    {
        TranslationSyncService.OnStateChanged -= Changed;
    }

}