@page "/"
@using WordFLux.ClientApp.Models
@using WordFLux.ClientApp.Services
@using WordFLux.ClientApp.Pages.Shared
@using WordFLux.ClientApp.Components
@inject WeatherApiClient WeatherApi
@inject NavigationManager Navigation
@inject ConnectionHealthService ConnectionHealthService
@implements IDisposable

<PageTitle>Home</PageTitle>

@if (!IsOnline)
{
    <div class="container">
        <div>
            Looks you are offline. You can
            <a href="/offline/translator">
                <span>go to offline page </span>
            </a> to add items that will be automatically added to your dictionary later.
        </div>
    </div>
}

@if (IsOnline)
{
    <div class="container">

        @if (Translation != null && !string.IsNullOrWhiteSpace(Translation.SuggestedTerm) && !Translation.SuggestedTerm.Equals(Term, StringComparison.InvariantCultureIgnoreCase))
        {
            <div>No found results for <span class="text-secondary">@Term</span>. Showing results for <span class="text-info">@Translation.SuggestedTerm </span></div>
        }


        <div class="mb-3 position-relative">

            <div class="d-flex justify-content-between mb-2">

                <div>
                    @if (IsLoading)
                    {
                        <button class="btn btn-outline-info @EnabledState()" type="button" disabled>
                            <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                            <span role="status">Loading...</span>
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-info @EnabledState()" @onclick="TryItOut">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
                            </svg>
                            <span > Try it!</span>
                        </button>
                    }
                </div>

                <div class="form-check form-switch align-self-end">
                    <input class="form-check-input" @bind-value="@UseAzureAiTranslator" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                    <label class="form-check-label" for="flexSwitchCheckDefault">Use Azure AI Translator </label>
                </div>

            </div>


            @*<textarea bind="Term" class="form-control @EnabledState()" placeholder="What do you want to memorize?" aria-label="term"></textarea>*@

            <div class="position-relative">
                <TranslationAutocomplete OnTermChanged="TermChanged" OnSearch="Search" Term="@Term"/>
                <i class="bi bi-x-circle position-absolute clear-button @EnabledState()" @onclick="Reset"></i>

                @if (!string.IsNullOrWhiteSpace(ActualTerm))
                {
                    <span class="audio-button">
                        <AudioFromText Term="@ActualTerm"/>
                    </span>
                }

                @if (Level != null)
                {
                    <span class="badge text-bg-light position-absolute start-0 translate-middle">@Level</span>
                }

            </div>

        </div>

        <div class="container-fluid m-2">
            @foreach (var item in TranslationCheeps)
            {
                <h5 class="d-inline me-1">
                    <span class="badge text-bg-secondary" style="white-space: break-spaces">@item</span>
                </h5>
            }
        </div>

        @*
        <button type="button" class="btn btn-outline-secondary clear-button p-0 border-0 @EnabledState()" >
            <i class="bi bi-x-circle"></i>
        </button>
        *@


        @if (Translation is { Translations: not null })
        {
            <AuthorizeView>
                <Authorized>
                    @if (IsSaved)
                    {
                        <button type="button" class="btn btn-warning ms-1 disabled">
                            ✔️
                            <span class=""> Saved to cards</span>
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-warning ms-1" disabled="@(IsLoading || IsExamplesLoading)" @onclick="SaveToCards">
                            ✔️
                            <span class=""> Save to cards</span>
                        </button>
                    }
                </Authorized>

                <NotAuthorized>
                    <button type="button" disabled class="btn btn-warning ms-1 disabled">
                        ✔️
                        <span class=""> Log in to save card</span>
                    </button>
                </NotAuthorized>
            </AuthorizeView>
        }


        @if (Examples.Count > 0)
        {
            <TranslationExamples OnTermSearch="SearchForTerm" Translations="Examples" OnMakePrimary="MakePrimary" OnRemoveTranslation="RemoveTranslation" Term="@ActualTerm"/>

            <div class="d-flex justify-content-center mt-1 mb-3">
                <button class="btn btn-outline-dark" disabled="@IsExamplesLoading" @onclick="LoadMoreExamples">Load more</button>
            </div>
        }

        @if (IsExamplesLoading)
        {
            <div class="d-flex justify-content-center text-center mt-5">
                <div class="me-2">Getting usage examples</div>
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only"></span>
                </div>
            </div>
        }

        @if (Translation != null)
        {
            <EditTranslation OnAddMyTranslation="AddMyTranslation" Term="@ActualTerm"/>
        }

    </div>
}


@code {

    [SupplyParameterFromQuery(Name = "term")]
    public string? Term { get; set; }

    public bool IsOnline => ConnectionHealthService.IsOnline;
    public string? ActualTerm => Translation != null && !string.IsNullOrWhiteSpace(Translation.SuggestedTerm) ? Translation.SuggestedTerm : Term;

    bool UseAzureAiTranslator { get; set; }
    bool IsLoading { get; set; }
    bool IsExamplesLoading { get; set; }
    bool IsSaved { get; set; }

    SimpleTranslationResponse? Translation { get; set; }
    string? Level { get; set; }
    List<CardTranslationItem> Examples { get; set; } = [];
    CancellationTokenSource _cancellationTokenSource = new();
    IEnumerable<string> TranslationCheeps => Examples.Count == 0 && Translation != null ? Translation.Translations : Examples.Select(x => x.Term.Trim('\n', ' '));

    protected override async Task OnInitializedAsync()
    {
        ConnectionHealthService.OnStatusChanged += () => InvokeAsync(StateHasChanged);

        if (!string.IsNullOrWhiteSpace(Term))
        {
            await TryItOut();
        }
    }

    async Task SearchForTerm(string term)
    {
        Term = term;

        await TryItOut();
    }

    async Task MakePrimary(CardTranslationItem item)
    {
        Examples.Remove(item);
        Examples.Insert(0, item);
    }

    async Task AddMyTranslation(CardTranslationItem cardTranslation)
    {
        Examples.Insert(0, cardTranslation);
    }

    async Task RemoveTranslation(CardTranslationItem item)
    {
        if (Examples.Count == 1)
        {
            return;
        }

        Examples.Remove(item);
    }

    async Task TryItOut()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Term))
            {
                return;
            }

            IsLoading = true;
            IsSaved = false;
            Translation = null;
            Level = null;
            Examples = [];

            Navigation.NavigateTo(
                Navigation.GetUriWithQueryParameter("term", Term));

            await _cancellationTokenSource.CancelAsync();
            _cancellationTokenSource = new();
            
            Translation = await WeatherApi.GetSimpleTranslations(Term, UseAzureAiTranslator, _cancellationTokenSource.Token);
            IsLoading = false;
            IsExamplesLoading = true;

            StateHasChanged();

            Level = await WeatherApi.GetLevel(Term, _cancellationTokenSource.Token);
            StateHasChanged();

            Examples = await WeatherApi.GetTranslationExamples(ActualTerm!, Translation.Translations, Translation.SourceLanguage, Translation.DestinationLanguage, UseAzureAiTranslator, _cancellationTokenSource.Token);
        }
        finally
        {
            IsLoading = false;
            IsExamplesLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task Reset()
    {
        await _cancellationTokenSource.CancelAsync();
        Term = null;
        Translation = null;
        Examples = [];
        Level = null;

        Navigation.NavigateTo(
            Navigation.GetUriWithQueryParameter("term", (string?)null));
    }

    // example: "This is a *bold* text"

    string EnabledState() => IsLoading ? "disabled" : "";

    async Task SaveToCards()
    {
        if (Translation == null)
        {
            return;
        }

        var cardRequest = new CardRequest(ActualTerm, Level, Examples);
        await WeatherApi.SaveNewCard(cardRequest);

        IsSaved = true;
    }

    private async Task LoadMoreExamples()
    {
        try
        {
            IsExamplesLoading = true;

            var res = await WeatherApi.GetAlternatives(ActualTerm, Translation.Translations, Translation.SourceLanguage, Translation.DestinationLanguage);

            Translation = Translation with { Translations = [..Translation.Translations, ..res] };
            var examples = await WeatherApi.GetTranslationExamples(ActualTerm!, res, Translation.SourceLanguage, Translation.DestinationLanguage, UseAzureAiTranslator);

            Examples = [..Examples, ..examples];
        }
        finally
        {
            IsExamplesLoading = false;
        }
    }

    public void Dispose()
    {
        ConnectionHealthService.OnStatusChanged -= StateHasChanged;
    }

    private void TermChanged(string term)
    {
        Console.WriteLine("Term changed to " + term);
        Term = term;
    }

    private async Task Search(string term)
    {
        Term = term;
        await TryItOut();
    }

}